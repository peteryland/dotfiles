#!/bin/bash

# Git Status for Vim

case "$OSTYPE" in
  darwin*)
    statm() { stat -f %m -- "$@"; }
    ;;
  linux*)
    statm() { stat --printf %Y -- "$@"; }
    ;;
  *)
    statm() { return 0; }
esac

if [[ $1 ]]; then
  cd -- "$(dirname -- "$1")"
fi

unset git_branch git_ahead git_behind git_extrastatus

git_status=

if ! type -p git > /dev/null; then
  exit
fi

while true; do
  case "$(git rev-parse --is-inside-git-dir 2> /dev/null)" in
    true)  cd ..;;
    false) break;;
    *)     exit;;
  esac
done

# if we're in a repo with a readable .git dir (but not in $HOME) # && $HOME != "$(git rev-parse --show-toplevel)"
if [[ -e $(git rev-parse --git-dir 2>/dev/null) ]]; then
  if [[ $1 ]] && git check-ignore -q -- "$1"; then
    exit 0
  fi
  # get the repo dir
  repo="$(git rev-parse --show-toplevel)"
  # do a fetch if we haven't done one for more than a minute
  if [[ ! ( -r $repo/.git/FETCH_HEAD ) || ( $(( $(date +%s) - $(statm "$repo"/.git/FETCH_HEAD) )) -gt 60 ) ]]; then
    (
      git fetch --quiet &> /dev/null & disown -a
    )
  fi
  status="$(git status --porcelain=1 -b)"
  status1="$(head -1 <<< "$status")"
  git_branch="$(cut -c4- <<< "$status1" | cut -d\. -f1)"
  if [[ $git_branch =~ master|main ]]; then
    git_branch=
  fi
  git_ahead="$(grep ahead <<< "$status1" | sed 's/.*ahead \([0-9]*\).*/\1/')"
  git_behind="$(grep behind <<< "$status1" | sed 's/.*behind \([0-9]*\).*/\1/')"
  git_extrastatus="$(grep -q '^[ACDMRT]' <<< "$status" && printf S; grep -q '^.[CDMRT]' <<< "$status" && printf M)" #; grep -q ^\?\? <<< "$status" && printf U)"
  git_status="$git_branch${git_ahead:+↑$git_ahead}${git_behind:+↓$git_behind}$git_extrastatus"
fi

printf %s "${git_status:+%#GitBG#${git_branch:+%#GitBlue#$git_branch}${git_ahead:+%#GitGreen#↑$git_ahead}${git_behind:+%#GitRed#↓$git_behind}${git_extrastatus:+%#GitYellow#$git_extrastatus}%*%#GitBG#%#StatusLine# }"
