#!/bin/bash

case "$OSTYPE" in
  darwin*)
    statm() { stat -f %m "$@"; }
    ;;
  linux*)
    statm() { stat --printf %Y "$@"; }
    ;;
  *)
    statm() { return 0; }
esac

if [ "$1" ]; then
  cd -- "$(dirname "$1")"
fi

unset bashrc_git_branch bashrc_git_ahead bashrc_git_behind

bashrc_git_status=

if ! type -p git > /dev/null; then
  return
fi

# if we're in a repo with a readable .git dir (but not in $HOME) # && $HOME != "$(git rev-parse --show-toplevel)"
if [[ -e "$(git rev-parse --git-dir 2>/dev/null)" ]]; then
  if [ "$1" ] && git check-ignore -q "$1"; then
    exit 0
  fi
  # get the repo dir
  repo=$(git rev-parse --show-toplevel)
  # do a fetch if we haven't done one for more than a minute
  if [[ ! ( -r "$repo"/.git/FETCH_HEAD ) || ( $(( $(date +%s) - $(statm "$repo"/.git/FETCH_HEAD) )) -gt 60 ) ]]; then
    (
      git fetch --quiet &> /dev/null & disown -a
    )
  fi
  status="$(git status --porcelain=1 -b)"
  status1="$(head -1 <<< "$status")"
  bashrc_git_branch="$(cut -c4- <<< "$status1" | cut -d\. -f1)"
  if [[ $bashrc_git_branch =~ master|main ]]; then
    bashrc_git_branch=
  fi
  bashrc_git_ahead="$(grep ahead <<< "$status1" | sed 's/.*ahead \([0-9]*\).*/\1/')"
  bashrc_git_behind="$(grep behind <<< "$status1" | sed 's/.*behind \([0-9]*\).*/\1/')"
  bashrc_git_extrastatus=$(grep -q '^[AM]' <<< "$status" && echo -n S; grep -q ^.M <<< "$status" && echo -n M) #; grep -q ^\?\? <<< "$status" && echo -n U)
  bashrc_git_status="$bashrc_git_branch${bashrc_git_ahead:+↑$bashrc_git_ahead}${bashrc_git_behind:+↓$bashrc_git_behind}$bashrc_git_extrastatus"
fi

echo -n "${bashrc_git_status:+[${bashrc_git_branch:+%#GitBlue#$bashrc_git_branch}${bashrc_git_ahead:+%#GitGreen#↑$bashrc_git_ahead}${bashrc_git_behind:+%#GitRed#↓$bashrc_git_behind}${bashrc_git_extrastatus:+%#GitYellow#$bashrc_git_extrastatus}%*] }"
